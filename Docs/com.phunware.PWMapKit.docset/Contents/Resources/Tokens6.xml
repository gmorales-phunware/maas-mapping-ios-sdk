<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/PWMapView.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/PWMapView</TokenIdentifier>
			<Abstract type="html">A PWMapView object provides an embeddable indoor map interface. You use this class as-is to display indoor map information and to manipulate the map contents from your application. You can center the map on a given coordinate, specify the size of the area you want to display, annotate the map with custom points of interest, route between points, and more.</Abstract>
			<DeclaredIn>PWMapView.h</DeclaredIn>
            
			
			<NodeRef refid="6"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PWMapView/setBuildingID:</TokenIdentifier>
			<Abstract type="html">Returns the building ID that initialized the PWMapView object.</Abstract>
			<DeclaredIn>PWMapView.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *buildingID</Declaration>
			
			
			<Anchor>//api/name/buildingID</Anchor>
            <NodeRef refid="6"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PWMapView/buildingID</TokenIdentifier>
			<Abstract type="html">Returns the building ID that initialized the PWMapView object.</Abstract>
			<DeclaredIn>PWMapView.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *buildingID</Declaration>
			
			
			<Anchor>//api/name/buildingID</Anchor>
            <NodeRef refid="6"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/PWMapView/buildingID</TokenIdentifier>
			<Abstract type="html">Returns the building ID that initialized the PWMapView object.</Abstract>
			<DeclaredIn>PWMapView.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *buildingID</Declaration>
			
			
			<Anchor>//api/name/buildingID</Anchor>
            <NodeRef refid="6"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PWMapView/setMapName:</TokenIdentifier>
			<Abstract type="html">Returns the map name that has beend specified for the map in MaaS Portal -&gt; Location.</Abstract>
			<DeclaredIn>PWMapView.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *mapName</Declaration>
			
			
			<Anchor>//api/name/mapName</Anchor>
            <NodeRef refid="6"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PWMapView/mapName</TokenIdentifier>
			<Abstract type="html">Returns the map name that has beend specified for the map in MaaS Portal -&gt; Location.</Abstract>
			<DeclaredIn>PWMapView.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *mapName</Declaration>
			
			
			<Anchor>//api/name/mapName</Anchor>
            <NodeRef refid="6"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/PWMapView/mapName</TokenIdentifier>
			<Abstract type="html">Returns the map name that has beend specified for the map in MaaS Portal -&gt; Location.</Abstract>
			<DeclaredIn>PWMapView.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *mapName</Declaration>
			
			
			<Anchor>//api/name/mapName</Anchor>
            <NodeRef refid="6"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PWMapView/setAnnotations:</TokenIdentifier>
			<Abstract type="html">Returns an NSArray of objects that conform to the PWAnnotation protocol. This array may be nil or empty while the map is loading. You should only try and access this property after recieving the mapViewDidLoad: delegate callback.</Abstract>
			<DeclaredIn>PWMapView.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) NSArray *annotations</Declaration>
			
			
			<Anchor>//api/name/annotations</Anchor>
            <NodeRef refid="6"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PWMapView/annotations</TokenIdentifier>
			<Abstract type="html">Returns an NSArray of objects that conform to the PWAnnotation protocol. This array may be nil or empty while the map is loading. You should only try and access this property after recieving the mapViewDidLoad: delegate callback.</Abstract>
			<DeclaredIn>PWMapView.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) NSArray *annotations</Declaration>
			
			
			<Anchor>//api/name/annotations</Anchor>
            <NodeRef refid="6"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/PWMapView/annotations</TokenIdentifier>
			<Abstract type="html">Returns an NSArray of objects that conform to the PWAnnotation protocol. This array may be nil or empty while the map is loading. You should only try and access this property after recieving the mapViewDidLoad: delegate callback.</Abstract>
			<DeclaredIn>PWMapView.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) NSArray *annotations</Declaration>
			
			
			<Anchor>//api/name/annotations</Anchor>
            <NodeRef refid="6"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PWMapView/setFloors:</TokenIdentifier>
			<Abstract type="html">Returns an NSArray of PWFloor objects. This array may be nil or empty while the map is loading. You should only try and access this property after recieving the mapViewDidLoad: delegate callback.</Abstract>
			<DeclaredIn>PWMapView.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) NSArray *floors</Declaration>
			
			
			<Anchor>//api/name/floors</Anchor>
            <NodeRef refid="6"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PWMapView/floors</TokenIdentifier>
			<Abstract type="html">Returns an NSArray of PWFloor objects. This array may be nil or empty while the map is loading. You should only try and access this property after recieving the mapViewDidLoad: delegate callback.</Abstract>
			<DeclaredIn>PWMapView.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) NSArray *floors</Declaration>
			
			
			<Anchor>//api/name/floors</Anchor>
            <NodeRef refid="6"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/PWMapView/floors</TokenIdentifier>
			<Abstract type="html">Returns an NSArray of PWFloor objects. This array may be nil or empty while the map is loading. You should only try and access this property after recieving the mapViewDidLoad: delegate callback.</Abstract>
			<DeclaredIn>PWMapView.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) NSArray *floors</Declaration>
			
			
			<Anchor>//api/name/floors</Anchor>
            <NodeRef refid="6"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PWMapView/setCurrentFloor:</TokenIdentifier>
			<Abstract type="html">Returns the currently displayed floor. This array may be nil or empty while the map is loading. You should only try and access this property after recieving the mapViewDidLoad: delegate callback.</Abstract>
			<DeclaredIn>PWMapView.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) PWBuildingFloor *currentFloor</Declaration>
			
			
			<Anchor>//api/name/currentFloor</Anchor>
            <NodeRef refid="6"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PWMapView/currentFloor</TokenIdentifier>
			<Abstract type="html">Returns the currently displayed floor. This array may be nil or empty while the map is loading. You should only try and access this property after recieving the mapViewDidLoad: delegate callback.</Abstract>
			<DeclaredIn>PWMapView.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) PWBuildingFloor *currentFloor</Declaration>
			
			
			<Anchor>//api/name/currentFloor</Anchor>
            <NodeRef refid="6"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/PWMapView/currentFloor</TokenIdentifier>
			<Abstract type="html">Returns the currently displayed floor. This array may be nil or empty while the map is loading. You should only try and access this property after recieving the mapViewDidLoad: delegate callback.</Abstract>
			<DeclaredIn>PWMapView.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) PWBuildingFloor *currentFloor</Declaration>
			
			
			<Anchor>//api/name/currentFloor</Anchor>
            <NodeRef refid="6"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PWMapView/setZoomScale:</TokenIdentifier>
			<Abstract type="html">A floating-point value that specifies the current scale factor applied to the map view&apos;s content.</Abstract>
			<DeclaredIn>PWMapView.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) CGFloat zoomScale</Declaration>
			
			
			<Anchor>//api/name/zoomScale</Anchor>
            <NodeRef refid="6"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PWMapView/zoomScale</TokenIdentifier>
			<Abstract type="html">A floating-point value that specifies the current scale factor applied to the map view&apos;s content.</Abstract>
			<DeclaredIn>PWMapView.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) CGFloat zoomScale</Declaration>
			
			
			<Anchor>//api/name/zoomScale</Anchor>
            <NodeRef refid="6"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/PWMapView/zoomScale</TokenIdentifier>
			<Abstract type="html">A floating-point value that specifies the current scale factor applied to the map view&apos;s content.</Abstract>
			<DeclaredIn>PWMapView.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) CGFloat zoomScale</Declaration>
			
			
			<Anchor>//api/name/zoomScale</Anchor>
            <NodeRef refid="6"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PWMapView/setScrollEnabled:</TokenIdentifier>
			<Abstract type="html">A BOOL value that determines whether the user may scroll around the map.</Abstract>
			<DeclaredIn>PWMapView.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, getter=isScrollEnabled) BOOL scrollEnabled</Declaration>
			
			
			<Anchor>//api/name/scrollEnabled</Anchor>
            <NodeRef refid="6"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PWMapView/isScrollEnabled</TokenIdentifier>
			<Abstract type="html">A BOOL value that determines whether the user may scroll around the map.</Abstract>
			<DeclaredIn>PWMapView.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, getter=isScrollEnabled) BOOL scrollEnabled</Declaration>
			
			
			<Anchor>//api/name/scrollEnabled</Anchor>
            <NodeRef refid="6"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/PWMapView/scrollEnabled</TokenIdentifier>
			<Abstract type="html">A BOOL value that determines whether the user may scroll around the map.</Abstract>
			<DeclaredIn>PWMapView.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, getter=isScrollEnabled) BOOL scrollEnabled</Declaration>
			
			
			<Anchor>//api/name/scrollEnabled</Anchor>
            <NodeRef refid="6"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PWMapView/setDelegate:</TokenIdentifier>
			<Abstract type="html">The receiver’s delegate.</Abstract>
			<DeclaredIn>PWMapView.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, weak) id&lt;PWMapViewDelegate&gt; delegate</Declaration>
			
			
			<Anchor>//api/name/delegate</Anchor>
            <NodeRef refid="6"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PWMapView/delegate</TokenIdentifier>
			<Abstract type="html">The receiver’s delegate.</Abstract>
			<DeclaredIn>PWMapView.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, weak) id&lt;PWMapViewDelegate&gt; delegate</Declaration>
			
			
			<Anchor>//api/name/delegate</Anchor>
            <NodeRef refid="6"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/PWMapView/delegate</TokenIdentifier>
			<Abstract type="html">The receiver’s delegate.</Abstract>
			<DeclaredIn>PWMapView.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, weak) id&lt;PWMapViewDelegate&gt; delegate</Declaration>
			
			
			<Anchor>//api/name/delegate</Anchor>
            <NodeRef refid="6"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PWMapView/initWithFrame:buildingID:venueID:</TokenIdentifier>
			<Abstract type="html">Initialize a map view with the specified frame, building ID, and venue ID.</Abstract>
			<DeclaredIn>PWMapView.h</DeclaredIn>
			
			<Declaration>- (instancetype)initWithFrame:(CGRect)frame buildingID:(NSString *)buildingID venueID:(NSString *)venueID</Declaration>
			<Parameters>
				<Parameter>
					<Name>frame</Name>
					<Abstract type="html">A rectangle specifying the initial location and size of the map view in its superview&apos;s coordinates.</Abstract>
				</Parameter><Parameter>
					<Name>buildingID</Name>
					<Abstract type="html">The building ID for the map view. This value can be found in the Location area of MaaS Portal</Abstract>
				</Parameter><Parameter>
					<Name>venueID</Name>
					<Abstract type="html">The venue ID for the map view. This value can be found in the Location area of MaaS Portal.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/initWithFrame:buildingID:venueID:</Anchor>
            <NodeRef refid="6"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PWMapView/setCurrentFloor:completion:</TokenIdentifier>
			<Abstract type="html">Change the currently displayed floor to another PWBuildingFloor object. Passing the same floor will have no effect. When the floor change is complete the completion block is called.</Abstract>
			<DeclaredIn>PWMapView.h</DeclaredIn>
			
			<Declaration>- (void)setCurrentFloor:(PWBuildingFloor *)newCurrentFloor completion:(void ( ^ ) ( BOOL didSucceed ))completion</Declaration>
			<Parameters>
				<Parameter>
					<Name>newCurrentFloor</Name>
					<Abstract type="html">The PWBuildingFloor object that you would like to set as the current floor.</Abstract>
				</Parameter><Parameter>
					<Name>completion</Name>
					<Abstract type="html">A block object to be executed when setCurrentFloor:completion: completes. This block has no return value and takes one argument:,
- A BOOL value that indicates whether or not the floor change succeeded.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setCurrentFloor:completion:</Anchor>
            <NodeRef refid="6"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PWMapView/refreshAnnotations</TokenIdentifier>
			<Abstract type="html">Reloads the visible annotations.</Abstract>
			<DeclaredIn>PWMapView.h</DeclaredIn>
			
			<Declaration>- (void)refreshAnnotations</Declaration>
			
			
			<Anchor>//api/name/refreshAnnotations</Anchor>
            <NodeRef refid="6"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PWMapView/addAnnotation:</TokenIdentifier>
			<Abstract type="html">Adds the specified annotation to the map view.</Abstract>
			<DeclaredIn>PWMapView.h</DeclaredIn>
			
			<Declaration>- (void)addAnnotation:(id&lt;PWAnnotation&gt;)annotation</Declaration>
			<Parameters>
				<Parameter>
					<Name>annotation</Name>
					<Abstract type="html">The annotation object to add to the receiver. This object must conform to the PWAnnotation protocol. The map view retains the specified object.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/addAnnotation:</Anchor>
            <NodeRef refid="6"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PWMapView/addAnnotations:</TokenIdentifier>
			<Abstract type="html">Adds an array of annotations to the map view.</Abstract>
			<DeclaredIn>PWMapView.h</DeclaredIn>
			
			<Declaration>- (void)addAnnotations:(NSArray *)annotations</Declaration>
			<Parameters>
				<Parameter>
					<Name>annotations</Name>
					<Abstract type="html">An array of annotation objects. Each object in the array must conform to the PWAnnotation protocol. The map view retains the individual annotation objects.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/addAnnotations:</Anchor>
            <NodeRef refid="6"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PWMapView/removeAnnotation:</TokenIdentifier>
			<Abstract type="html">Removes the specified annotation object from the map view.</Abstract>
			<DeclaredIn>PWMapView.h</DeclaredIn>
			
			<Declaration>- (void)removeAnnotation:(id&lt;PWAnnotation&gt;)annotation</Declaration>
			<Parameters>
				<Parameter>
					<Name>annotation</Name>
					<Abstract type="html">The annotation object to remove. This object must conform to the PWAnnotation protocol.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/removeAnnotation:</Anchor>
            <NodeRef refid="6"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PWMapView/removeAnnotations:</TokenIdentifier>
			<Abstract type="html">Removes an array of annotation objects from the map view.</Abstract>
			<DeclaredIn>PWMapView.h</DeclaredIn>
			
			<Declaration>- (void)removeAnnotations:(NSArray *)annotations</Declaration>
			<Parameters>
				<Parameter>
					<Name>annotations</Name>
					<Abstract type="html">The annotation object to remove. This object must conform to the PWAnnotation protocol.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/removeAnnotations:</Anchor>
            <NodeRef refid="6"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PWMapView/removeAllAnnotations</TokenIdentifier>
			<Abstract type="html">Removes all annotation objects from the map view.</Abstract>
			<DeclaredIn>PWMapView.h</DeclaredIn>
			
			<Declaration>- (void)removeAllAnnotations</Declaration>
			
			
			<Anchor>//api/name/removeAllAnnotations</Anchor>
            <NodeRef refid="6"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PWMapView/dequeueReusableAnnotationViewWithReuseIdentifier:</TokenIdentifier>
			<Abstract type="html">Returns a reusable annotation view located by its identifier.</Abstract>
			<DeclaredIn>PWMapView.h</DeclaredIn>
			
			<Declaration>- (PWAnnotationView *)dequeueReusableAnnotationViewWithReuseIdentifier:(NSString *)reuseIdentifier</Declaration>
			<Parameters>
				<Parameter>
					<Name>reuseIdentifier</Name>
					<Abstract type="html">A string identifying the annotation view to be reused. This string is the same one you specify when initializing the annotation view using the initWithAnnotation:reuseIdentifier: method.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/dequeueReusableAnnotationViewWithReuseIdentifier:</Anchor>
            <NodeRef refid="6"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PWMapView/viewForAnnotation:</TokenIdentifier>
			<Abstract type="html">Returns the annotation view associated with the specified annotation object, if any.</Abstract>
			<DeclaredIn>PWMapView.h</DeclaredIn>
			
			<Declaration>- (PWAnnotationView *)viewForAnnotation:(id&lt;PWAnnotation&gt;)annotation</Declaration>
			<Parameters>
				<Parameter>
					<Name>annotation</Name>
					<Abstract type="html">The annotation object whose view you want.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/viewForAnnotation:</Anchor>
            <NodeRef refid="6"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PWMapView/centerNavigationAnnotation</TokenIdentifier>
			<Abstract type="html">Centers the map view on the navigation annotation (the blue dot). If no navigation annotation exists, this method does nothin.</Abstract>
			<DeclaredIn>PWMapView.h</DeclaredIn>
			
			<Declaration>- (void)centerNavigationAnnotation</Declaration>
			
			
			<Anchor>//api/name/centerNavigationAnnotation</Anchor>
            <NodeRef refid="6"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PWMapView/setCenterCoordinate:animated:</TokenIdentifier>
			<Abstract type="html">Changes the center coordinate of the map and optionally animates the change.</Abstract>
			<DeclaredIn>PWMapView.h</DeclaredIn>
			
			<Declaration>- (void)setCenterCoordinate:(CGPoint)center animated:(BOOL)animated</Declaration>
			<Parameters>
				<Parameter>
					<Name>center</Name>
					<Abstract type="html">The new center coordinate for the map.</Abstract>
				</Parameter><Parameter>
					<Name>animated</Name>
					<Abstract type="html">Specify YES if you want the map view to scroll to the new location or NO if you want the map to display the new location immediately.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setCenterCoordinate:animated:</Anchor>
            <NodeRef refid="6"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PWMapView/setCenterCoordinate:zoomLevel:animated:</TokenIdentifier>
			<Abstract type="html">Changes the center coordinate of the map  at the specified zoom scale and optionally animates the change.</Abstract>
			<DeclaredIn>PWMapView.h</DeclaredIn>
			
			<Declaration>- (void)setCenterCoordinate:(CGPoint)center zoomLevel:(NSInteger)zoomLevel animated:(BOOL)animated</Declaration>
			<Parameters>
				<Parameter>
					<Name>center</Name>
					<Abstract type="html">The new center coordinate for the map.</Abstract>
				</Parameter><Parameter>
					<Name>zoomLevel</Name>
					<Abstract type="html">The desired zoom level.</Abstract>
				</Parameter><Parameter>
					<Name>animated</Name>
					<Abstract type="html">Specify YES if you want the map view to scroll and zoom to the new location or NO if you want the map to display the new location and zoom level immediately.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setCenterCoordinate:zoomLevel:animated:</Anchor>
            <NodeRef refid="6"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PWMapView/setZoomScale:animated:</TokenIdentifier>
			<Abstract type="html">A floating-point value that specifies the current zoom scale.</Abstract>
			<DeclaredIn>PWMapView.h</DeclaredIn>
			
			<Declaration>- (void)setZoomScale:(CGFloat)zoomScale animated:(BOOL)animated</Declaration>
			<Parameters>
				<Parameter>
					<Name>zoomScale</Name>
					<Abstract type="html">The new value to scale the content to.</Abstract>
				</Parameter><Parameter>
					<Name>animated</Name>
					<Abstract type="html">YES to animate the transition to the new scale, NO to make the transition immediate.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setZoomScale:animated:</Anchor>
            <NodeRef refid="6"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PWMapView/toggleLocationTrackingWithCompletion:</TokenIdentifier>
			<Abstract type="html">Use this method to turn location tracking on or off.</Abstract>
			<DeclaredIn>PWMapView.h</DeclaredIn>
			
			<Declaration>- (void)toggleLocationTrackingWithCompletion:(void ( ^ ) ( BOOL didSucceed , NSError *error ))completion</Declaration>
			<Parameters>
				<Parameter>
					<Name>completion</Name>
					<Abstract type="html">A block object to be executed when toggleLocationTrackingWithCompletion:completion: completes. This block has no return value and takes two arguments:,
- A BOOL value that indicates whether or not the location tracking change succeeded.
- An NSError object describing the error that occurred. If there was no error this object will be nil.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/toggleLocationTrackingWithCompletion:</Anchor>
            <NodeRef refid="6"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PWMapView/trackingEnabled</TokenIdentifier>
			<Abstract type="html">Informs the current location tracking status. If location tracking is enabled the return value would be YES.</Abstract>
			<DeclaredIn>PWMapView.h</DeclaredIn>
			
			<Declaration>- (BOOL)trackingEnabled</Declaration>
			
			
			<Anchor>//api/name/trackingEnabled</Anchor>
            <NodeRef refid="6"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PWMapView/currentLocation</TokenIdentifier>
			<Abstract type="html">Returns the device location as a PWMapLocation object. The PWMapLocation object contains the x,y in the building coordinate space as well as a floor ID.</Abstract>
			<DeclaredIn>PWMapView.h</DeclaredIn>
			
			<Declaration>- (PWMapLocation *)currentLocation</Declaration>
			
			
			<Anchor>//api/name/currentLocation</Anchor>
            <NodeRef refid="6"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PWMapView/loadRoute:</TokenIdentifier>
			<Abstract type="html">Load a route to be displayed on the map view.</Abstract>
			<DeclaredIn>PWMapView.h</DeclaredIn>
			
			<Declaration>- (void)loadRoute:(PWRoute *)route</Declaration>
			<Parameters>
				<Parameter>
					<Name>route</Name>
					<Abstract type="html">The PWRoute object you wish to display on the map view.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/loadRoute:</Anchor>
            <NodeRef refid="6"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PWMapView/cancelRouting</TokenIdentifier>
			<Abstract type="html">Cancel the route being displayed on the map view. This method will remove the route from the map view.</Abstract>
			<DeclaredIn>PWMapView.h</DeclaredIn>
			
			<Declaration>- (void)cancelRouting</Declaration>
			
			
			<Anchor>//api/name/cancelRouting</Anchor>
            <NodeRef refid="6"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PWMapView/hasNextRouteSegment</TokenIdentifier>
			<Abstract type="html">Returns a BOOL value that indicates whether or not the route has additional segment(s).</Abstract>
			<DeclaredIn>PWMapView.h</DeclaredIn>
			
			<Declaration>- (BOOL)hasNextRouteSegment</Declaration>
			
			
			<Anchor>//api/name/hasNextRouteSegment</Anchor>
            <NodeRef refid="6"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PWMapView/showNextRouteSegment</TokenIdentifier>
			<Abstract type="html">Show the next route segment on the map view. If a route does not have any additional segments this method will do nothing.</Abstract>
			<DeclaredIn>PWMapView.h</DeclaredIn>
			
			<Declaration>- (void)showNextRouteSegment</Declaration>
			
			
			<Anchor>//api/name/showNextRouteSegment</Anchor>
            <NodeRef refid="6"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PWMapView/hasPreviousRouteSegment</TokenIdentifier>
			<Abstract type="html">Returns a BOOL value that indicates whether or not the route has previous segment(s).</Abstract>
			<DeclaredIn>PWMapView.h</DeclaredIn>
			
			<Declaration>- (BOOL)hasPreviousRouteSegment</Declaration>
			
			
			<Anchor>//api/name/hasPreviousRouteSegment</Anchor>
            <NodeRef refid="6"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PWMapView/showPreviousRouteSegment</TokenIdentifier>
			<Abstract type="html">Show the previous route segment on the map view. If a route does not have any previous segments this method will do nothing.</Abstract>
			<DeclaredIn>PWMapView.h</DeclaredIn>
			
			<Declaration>- (void)showPreviousRouteSegment</Declaration>
			
			
			<Anchor>//api/name/showPreviousRouteSegment</Anchor>
            <NodeRef refid="6"/>
		</Token>
		
        
	</File>
</Tokens>